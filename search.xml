<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于加密解密的一些事]]></title>
      <url>http://yoursite.com/encode-decode/</url>
      <content type="html"><![CDATA[<p>看到一个<a href="http://www.iroowe.com/about/" target="_blank" rel="external">blog</a>在关于我得联系方式中写得是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> YmVzdGx1b2xpd2VAZ21haWwuY29tCg== | openssl base64 <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>看起来很高大上的样子!!!<br>其实是利用base64的加密算法隐藏了自己的邮箱，先加密得到一个字符串<br>终端执行如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  <span class="keyword">echo</span> bestluoliwe@gmail.<span class="keyword">com</span> | openssl base64</span><br><span class="line">YmVzdGx1b2xpd2VAZ21haWwuY29tCg==</span><br><span class="line">➜  ~  <span class="keyword">echo</span> YmVzdGx1b2xpd2VAZ21haWwuY29tCg== | openssl base64 -<span class="keyword">d</span></span><br><span class="line">bestluoliwe@gmail.<span class="keyword">com</span></span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>
<p>也可以使用其他加密方式，比如<code>aes-128-cbc</code>, <code>des3</code></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  openssl <span class="keyword">enc</span> -aes-128-cbc -<span class="keyword">in</span> a.<span class="keyword">log</span> -<span class="keyword">out</span> b.<span class="literal">log</span></span><br><span class="line">enter aes-128-cbc encryption password:</span><br><span class="line">Verifying - enter aes-128-cbc encryption password:</span><br><span class="line">➜  openssl <span class="keyword">enc</span> -<span class="keyword">d</span> -aes-128-cbc -<span class="keyword">in</span> b.<span class="keyword">log</span> -<span class="keyword">out</span> c.<span class="literal">log</span></span><br><span class="line">enter aes-128-cbc decryption password:</span><br><span class="line">➜  tail c.<span class="literal">log</span></span><br><span class="line">king</span><br><span class="line">➜  tail a.<span class="literal">log</span></span><br><span class="line">king</span><br><span class="line">➜  tail b.<span class="literal">log</span></span><br><span class="line">Salted__��!����6L0��V��<span class="keyword">L</span>/�rD%                                                                                                     ➜</span><br></pre></td></tr></table></figure>
<p>这个地方加密出来的字符</p>
<p>看别人blog的时候经常看到md5这个词眼，我记得md5不属于加密解密的范围，但是百度md5的时候出现了很多md5解密网站，再深究一下这些网站应该是暴力匹配的破解方法，就是讲很多密码组合的md5求出来，当用户输入md5码的时候反向查找的方法</p>
<p>md5只是提取特征码，理论上不同文件的md5相同概率极小，所以用来做文件校验，给文件的同时给出md5码，防止被篡改，同样的还有sum、cksum、md5sum、sha1sum等等</p>
<p>下面是来自<a href="http://blog.sina.com.cn/s/blog_702c2db50100pjn7.html" target="_blank" rel="external">夜莺的博客</a></p>
<ol>
<li><p>base64编码/解码<br>谈到命令行下怎样发送邮件附件，很多人想起了uuencode。也能够使用base64编码。以下是openssl base64编码/解码的使用：<br>$ openssl base64   filename.txt<br>$ openssl base64 -d   filename.bin</p>
</li>
<li><p>校验文档的一致性<br>UNIX下校验文档一致性的方法很多，比如sum、cksum、md5sum、sha1sum等。sum和cksum适用于简单校验的场合，生成的校验码 容易重复。md5sum有安全漏洞，当前比较推荐的是sha1sum。但是sha1sum在不同的平台用法有些不同。考虑到跨平台性，建议用 openssl。<br>$ openssl sha1 filename<br>SHA1(filename)= e83a42b9bc8431a6645099be50b6341a35d3dceb<br>$ openssl md5 filename<br>MD5(filename)= 26e9855f8ad6a5906fea121283c729c4</p>
</li>
<li><p>文档加密/解密<br>OpenSSL支持很多加密算法，但是一些算法只是为了保持向后兼容性，现在已不推荐使用，比如DES和RC4-40。推荐使用的加密算法是 bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障。<br>加密示例：<br>$ openssl enc -aes-128-cbc   filename.aes-128-cbc<br>enter aes-128-cbc encryption password:<br>Verifying - enter aes-128-cbc encryption password:<br>解密示例：<br>$ openssl enc -d -aes-128-cbc -in filename.aes-128-cbc &gt; filename<br>enter aes-128-cbc decryption password:</p>
</li>
<li><p>口令生成和传递<br>openssl能够生成随机性很强的口令。<br>$ openssl rand 15 -base64<br>s69mj+8ToN2p3Z1KESBG<br>以上命令需要openssl生成15个字节序列，然后用base64编码，结果产生20个字符。<br>在日常生活中，经常可看到这样的情况：系统管理员配置初始密码给用户，然后让用户登录去修改新密码，这给安全带来了隐患。较好的做法是用户生成口令加密后 的结果发给管理员，让管理员配置到系统中。<br>比如对于以上生成的口令，UNIX口令加密方法如下：<br>$ openssl passwd -1 s69mj+8ToN2p3Z1KESBG<br>$1$Rp/btEwK$qhUGFlsIpDtNT1I9MD/Gg1<br>管理员收集每个用户交给他的加密后的串，写到一个文档中，比如文档名为newpassword：<br>user_a:$1$Rp/btEwK$qhUGFlsIpDtNT1I9MD/Gg1<br>user_b:$1$zmUy5lry$aG45DkcaJwM/GNlpBLTDy0<br>…<br>一个用户一行，用户名和密码之间用冒号分隔。<br>系统管理员运行如下命令导入用户密码：<br>$ chpasswd –encrypted<br>对于老UNIX系统，生成口令密码无需参数-1，比如：<br>$ openssl passwd s69mj+8ToN2p3Z1KESBG<br>Warning: truncating password to 8 characters<br>FS4lGulQ915WU<br>假如passwd命令后没有接口令，openssl会提示输入一个：<br>$ openssl passwd -1<br>Password:<br>Verifying - Password:<br>$1$jACBc0.C$KR5DcpttXQoKfDiapyvav0</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C中#和##的意义]]></title>
      <url>http://yoursite.com/C-Meanings/</url>
      <content type="html"><![CDATA[<p>看一些源码中经常出现#define中带有#或者##，查过很多次，每次都记不住。。</p>
<p>首先define是在预编译的时候做代码替换的<br><strong>1. 单个#表示字符串化，e.g. <code>#A</code>就相当于JAVA中的<code>(&quot;&quot;+A)</code>的意思</strong><br><strong>2. 双个##表示连接，e.g. <code>A##bc</code>替换之后相当于<code>Abc</code></strong></p>
<p>运行下下面代码就清晰了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> OUTPUT(A) cout&lt;&lt;#A&lt;&lt;<span class="string">":"</span>&lt;&lt;(A)&lt;&lt;endl;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CHAR(A) st##A</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FUNC_NAME(A, B) fun##A(B)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funName</span><span class="params">(<span class="built_in">string</span> name)</span> </span>&#123; OUTPUT(name); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; OUTPUT(age); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    OUTPUT(a);</span><br><span class="line">    OUTPUT(b);</span><br><span class="line">    OUTPUT(a + b);</span><br><span class="line">    OUTPUT(str);</span><br><span class="line"></span><br><span class="line">    OUTPUT(CHAR(r));</span><br><span class="line">    <span class="comment">//cout&lt;&lt;#CHAR(r)&lt;&lt;":"&lt;&lt;(CHAR(r))&lt;&lt;endl</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;#CHAR(r)&lt;&lt;":"&lt;&lt;(str)&lt;&lt;endl</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CHAR(r)"</span> &lt;&lt; <span class="string">":"</span> &lt;&lt; (str) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    FUNC_NAME(Name, <span class="string">"king"</span>);</span><br><span class="line">    FUNC_NAME(Age, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">a</span>:<span class="number">1</span></span><br><span class="line"><span class="tag">b</span>:<span class="number">2</span></span><br><span class="line"><span class="tag">a</span> + <span class="tag">b</span>:<span class="number">3</span></span><br><span class="line">str:name</span><br><span class="line"><span class="function"><span class="title">CHAR</span><span class="params">(r)</span></span>:name</span><br><span class="line"><span class="function"><span class="title">CHAR</span><span class="params">(r)</span></span>:name</span><br><span class="line">name:king</span><br><span class="line">age:<span class="number">12</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux free 命令]]></title>
      <url>http://yoursite.com/linux-free-command/</url>
      <content type="html"><![CDATA[<p>linux中的free命令可以查看内存使用情况，带参数<code>-m</code>表示按照Mb为单位输出，也可以带其他参数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits@<span class="number">100</span>:~$ <span class="built_in">free</span> -m</span><br><span class="line">             total       used       <span class="built_in">free</span>     shared    buffers     cached</span><br><span class="line">Mem:         <span class="number">16002</span>      <span class="number">15476</span>        <span class="number">526</span>          <span class="number">0</span>        <span class="number">410</span>       <span class="number">5257</span></span><br><span class="line">-/+ buffers/cache:       <span class="number">9808</span>       <span class="number">6194</span></span><br><span class="line">Swap:        <span class="number">16336</span>      <span class="number">15005</span>       <span class="number">1331</span></span><br><span class="line">fruits@<span class="number">100</span>:~$</span><br></pre></td></tr></table></figure>
<h3 id="第二行：">第二行：</h3><ol>
<li>total <code>16002</code>：总内存大小，可以认为就是机器的内存条大小</li>
<li>used <code>15476</code>：系统内核认为已使用的内存，是系统认为的占用内存，其实有些可以不算</li>
<li>free <code>526</code>：系统内核认为的空闲内存，完全空闲</li>
<li>shared 据说已弃用</li>
<li>buffers/cached <code>410/5257</code>：缓存</li>
</ol>
<p><strong>从内核角度看内存: total = userd + free</strong></p>
<h3 id="第三行：">第三行：</h3><ol>
<li><strong>used <code>9808</code>：</strong>从应用角度看是已分配的内存（不可能再分配给我了），等于第二行中的<strong>used - buffers - cached</strong></li>
<li><strong>free <code>6194</code>：</strong>从应用角度看是还可能给我的总内存，等于第二行中得<strong>free + buffers + cached</strong></li>
</ol>
<p><strong>从应用角度看内存：系统占用了9808M内存，能给我的内存是6194M</strong></p>
<p>参考：</p>
<ol>
<li><a href="http://itlab.idcquan.com/linux/set/935456.html" target="_blank" rel="external">http://itlab.idcquan.com/linux/set/935456.html</a></li>
<li><a href="http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html" target="_blank" rel="external">http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac homebrew 安装erlang特定版本]]></title>
      <url>http://yoursite.com/mac-homebrew-%E5%AE%89%E8%A3%85erlang%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>当前最新版是<code>R18</code>，但最新版有些代码和现在服务器代码不太兼容，需要使用<code>R17</code></p>
<ul>
<li>如果直接使用<code>brew install erlang</code>则直接安装的是最新版</li>
<li>使用<code>brew install erl</code>再选择version的方法<br><code>brew install homebrew/versions/erlang-r17</code><br>好像erlang的官网被墙，最后最是在下载man这一步死掉</li>
</ul>
<p>后面有尝试下载源代码的方式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.erlang.org/download/otp_src_17.5.tar.gz&#10;tar -zxvf otp_src_17.5.tar.gz&#10;cd otp_src_17.5&#10;sudo ./configure  --prefix=/opt/erlang&#10;sudo make&#10;sudo make install</span><br></pre></td></tr></table></figure>
<p>但在执行config的时候出现下面情况</p>
<blockquote>
<hr>
<p><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong>  APPLICATIONS DISABLED  <strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></p>
<hr>
<p>crypto         : No usable OpenSSL found<br>ssh            : No usable OpenSSL found<br>ssl            : No usable OpenSSL found</p>
<hr>
</blockquote>
<p>即表示openssl没有安装，但是自己调用openssl是ok的。。</p>
<p>找来找去<br>最后在<a href="https://github.com/elixir-lang/elixir/issues/1748" target="_blank" rel="external">github上的一个帖子</a><br>的最后找到openssl的问题，使用如下命令：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install -vd --<span class="keyword">with</span>-ssl=<span class="regexp">/usr/bin</span><span class="regexp">/openssl homebrew/versions</span><span class="regexp">/erlang-r17</span></span><br></pre></td></tr></table></figure>
<p>中途也会卡在man和html的地方，我直接选择ignore的方式，最后居然成功了，。。。</p>
<hr>
<p>以上是MAC下安装经历的问题，如果是在ubuntu下面，遇到类似的bug，下面这个链接可能有所帮助<br><a href="https://sites.google.com/site/comptekkia/erlang/how-to-install-erlang-on-ubuntu-10-10" target="_blank" rel="external">How to Install Erlang on Ubuntu 10.10</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse ADT ZIP包离线安装]]></title>
      <url>http://yoursite.com/Eclipse-ADT-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>官网的做法如下：<br><a href="http://developer.android.com/sdk/installing/installing-adt.html" target="_blank" rel="external">http://developer.android.com/sdk/installing/installing-adt.html</a></p>
<ol>
<li><p>Download the ADT Plugin zip file (do not unpack it):</p>
</li>
<li><p>Start Eclipse, then select <strong>Help</strong> &gt; <strong>Install New Software</strong>.</p>
</li>
<li>Click <strong>Add</strong>, in the top-right corner.</li>
<li>In the Add Repository dialog, click <strong>Archive</strong>.</li>
<li>Select the downloaded ADT-23.0.6.zip file and click OK.</li>
<li>Enter “ADT Plugin” for the name and click OK.</li>
<li>In the Available Software dialog, select the checkbox next to Developer Tools and click Next.</li>
<li>In the next window, you’ll see a list of the tools to be downloaded. Click Next.</li>
<li>Read and accept the license agreements, then click Finish.<br>If you get a security warning saying that the authenticity or validity of the software can’t be established, click OK.</li>
<li>When the installation completes, restart Eclipse.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac Android ADB环境变量设置]]></title>
      <url>http://yoursite.com/Mac-Android-ADB%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ol>
<li>启动Terminal终端工具</li>
<li>输入cd ~/ 进入当前用户的home目录</li>
<li>vim .bash_profile</li>
<li><p>在文件尾部加入以下内容：</p>
<pre><code>export <span class="constant">PATH=</span><span class="variable">${</span><span class="constant">PATH}</span><span class="symbol">:/android_sdk/tools</span><span class="symbol">:/android_sdk/platform-tools</span>
</code></pre></li>
<li><p>终端执行 <code>source .bash_profile</code> </p>
</li>
<li>验证：输入adb回车。如果未显示command not found，说明此命令有效，环境便亮设置完成。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android SDK Manager 代理设置]]></title>
      <url>http://yoursite.com/Android-SDK-Manager-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ol>
<li><p>启动 Android SDK Manager ，打开主界面，依次选择「Tools」、「Options…」，弹出『Android SDK Manager - Settings』窗口；</p>
</li>
<li><p>在『Android SDK Manager - Settings』窗口中，在「HTTP Proxy Server」和「HTTP Proxy Port」输入框内填入 <strong>mirrors.neusoft.edu.cn</strong> 和 <strong>80</strong>，并且选中 <em>Force https://… sources to be fetched using http://…</em>复选框。设置完成后单击「Close」按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；</p>
</li>
<li><p>依次选择「Packages」、「Reload」。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3974 Palindrome]]></title>
      <url>http://yoursite.com/POJ-3974-Palindrome/</url>
      <content type="html"><![CDATA[<p><strong>题目大意</strong>:<br><strong>“给一个小写字符串（长度最长达到10w），找出其中最长回文串的长度”</strong></p>
<p>看到这个题目的数据范围就傻逼了，不会做。。猜测可能是后缀数组或者AC自动机之类的算法，但这么多AC的题目我居然不会做，有点不甘心啊，看来应该是个经典题，就找了下</p>
<ol>
<li>后缀数组好像确实可以，复杂度O(nlogn)，但是我早忘光了。。</li>
<li>Manacher算法，复杂度O(n)，但是没学过啊。。</li>
</ol>
<p>不会就学一下！</p>
<p>Manacher算法思想还是很简单的，假设一个串是回文串，那么从必然左右对称，那么如果求出了对称中左半部分是个回文串，那么右边部分的最小可能值就出来了</p>
<p>具体看这个，有图还是容易理解一些：<br><a href="http://www.felix021.com/blog/read.php?2040" target="_blank" rel="external">http://www.felix021.com/blog/read.php?2040</a><br>或者这个：<br><a href="http://blog.sina.com.cn/s/blog_70811e1a01014esn.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_70811e1a01014esn.html</a></p>
<p>本题AC代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN <span class="number">2000010</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN], tmp[MAXN];<span class="comment">//1000000*2+10</span></span><br><span class="line"><span class="keyword">int</span> p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> p[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    p[0] = 1;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx &lt;= i)</span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i] = min(mx - i, p[<span class="number">2</span> * id - i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i - p[i] &gt;= <span class="number">0</span> &amp;&amp; i + p[i] &lt; len &amp;&amp; str[i - p[i]] == str[i + p[i]])</span><br><span class="line">            p[i]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + p[i] &gt; mx) &#123;</span><br><span class="line">            mx = p[i] + i;</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nca = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp, <span class="string">"END"</span>) == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(tmp), k = <span class="number">2</span>;</span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">'?'</span>;</span><br><span class="line">        str[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            str[k++] = tmp[i];</span><br><span class="line">            str[k++] = <span class="string">'#'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str[k] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, nca++, solve(str, p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实算法核心只有不到10行，赞！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 时遇到fatal:multiple stage entries for merged file处理办法]]></title>
      <url>http://yoursite.com/git-%E6%97%B6%E9%81%87%E5%88%B0fatal-multiple-stage-entries-for-merged-file%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>进入到git的根目录下</strong></p>
<ol>
<li>rm .git/index</li>
<li>git add ./</li>
<li>git commit -am “信息”</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3752 字母旋转游戏]]></title>
      <url>http://yoursite.com/POJ-3752-%E5%AD%97%E6%AF%8D%E6%97%8B%E8%BD%AC%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>每日一水</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans[<span class="number">1002</span>][<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方向变化方向依次是：向右、向下、向左、向上</span></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = n * m;</span><br><span class="line">        <span class="built_in">memset</span>(ans, -<span class="number">1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, start = <span class="number">0</span>, ii = <span class="number">0</span>, jj = <span class="number">0</span>, i, j;</span><br><span class="line">        <span class="keyword">while</span> (cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans[ii][jj] = start;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断是否转向</span></span><br><span class="line">            i = dir[k][<span class="number">0</span>] + ii;</span><br><span class="line">            j = dir[k][<span class="number">1</span>] + jj;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= n || j &gt;= m || ans[i][j] != -<span class="number">1</span>)</span><br><span class="line">                k = (k + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            start = (start + <span class="number">1</span>) % <span class="number">26</span>;</span><br><span class="line">            ii = ii + dir[k][<span class="number">0</span>];</span><br><span class="line">            jj = jj + dir[k][<span class="number">1</span>];</span><br><span class="line">            --cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"   %c"</span>, <span class="string">'A'</span> + ans[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
