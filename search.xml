<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Homebrew 更新Bug]]></title>
      <url>http://yoursite.com/homebrew-update-bug/</url>
      <content type="html"><![CDATA[<p>最新更新brew一直提示Already up-to-date，感觉不太对劲，到<a href="https://github.com/Homebrew/brew" target="_blank" rel="external">homebrew的github主页</a>上看了看，果然：</p>
<h4 id="Update_Bug">Update Bug</h4><p>If Homebrew was updated on Aug 10-11th 2016 and <code>brew update</code> always says <code>Already up-to-date.</code> you need to run:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> $(brew --repo); <span class="attribute">git</span> fetch; <span class="attribute">git</span> reset --hard origin/master; <span class="attribute">brew</span> update</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【已解决】python多版本引发的 No moudle named xxx 问题]]></title>
      <url>http://yoursite.com/python-bs4/</url>
      <content type="html"><![CDATA[<p>今天在sublime text2运行一个python脚本的时候出现了<strong><code>no module named bs4</code></strong>，bs4是python中beautifulsoup库的简写，按照bs4的安装命令</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> beautifulsoup4</span><br></pre></td></tr></table></figure>
<p>安装之后发现sublime下依然无法正确运行，<br>在iTerm终端的直接执行的python命令行中却可以<code>import bs4</code>的，推想可能安装了多个python版本<br>验证如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  aws  python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">11</span> (default, Dec  <span class="number">5</span> <span class="number">2015</span>, <span class="number">14</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">53</span>)</span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">7.0</span>.<span class="number">0</span> (clang-<span class="number">700.1</span>.<span class="number">76</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import bs4</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; quit()</span><br><span class="line">➜  aws  ./spiderx.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"./spiderx.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line">    from bs4 import BeautifulSoup</span><br><span class="line"><span class="symbol">ImportError:</span> No <span class="class"><span class="keyword">module</span> <span class="title">named</span> <span class="title">bs4</span></span></span><br><span class="line">➜  aws  whereis python</span><br><span class="line">/usr/bin/python</span><br><span class="line">➜  aws  python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">11</span> (default, Dec  <span class="number">5</span> <span class="number">2015</span>, <span class="number">14</span><span class="symbol">:</span><span class="number">44</span><span class="symbol">:</span><span class="number">53</span>)</span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">7.0</span>.<span class="number">0</span> (clang-<span class="number">700.1</span>.<span class="number">76</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; quit()</span><br><span class="line">➜  aws  /usr/bin/python</span><br><span class="line">Python <span class="number">2.7</span>.<span class="number">10</span> (default, Oct <span class="number">23</span> <span class="number">2015</span>, <span class="number">18</span><span class="symbol">:</span><span class="number">05</span><span class="symbol">:</span><span class="number">06</span>)</span><br><span class="line">[GCC <span class="number">4.2</span>.<span class="number">1</span> Compatible Apple LLVM <span class="number">7.0</span>.<span class="number">0</span> (clang-<span class="number">700.0</span>.<span class="number">59.5</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import bs4</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="symbol">ImportError:</span> No <span class="class"><span class="keyword">module</span> <span class="title">named</span> <span class="title">bs4</span></span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>发现确实安装了两个版本的python，一个是2.7.10，一个是2.7.11，有一个应该是自带的，另外一个应该是通过brew安装的，在usr/local/bin/下面，而sublime中使用的应该是/usr/bin/python，因为在py文件的开头有</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line">#-*- coding: UTF-<span class="number">8</span> -*-</span><br></pre></td></tr></table></figure>
<p>解决方法，删掉brew安装的版本(删除自带的版本貌似比较麻烦，而且都是2.7就没有必要了)<br><code>brew uninstall python</code><br>再运行python的时候进入的是2.7.10，表示2.7.11已经删除</p>
<p>如此可以再安装bs4，使用如下命令：<br><code>sudo pip install beautifulsoup4</code><br>提示pip command not found，汗。。</p>
<p>使用<code>brew install pip</code>命令，达到如下结果</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  brew <span class="keyword">install</span> pip</span><br><span class="line"><span class="keyword">Error</span>: <span class="keyword">No</span> available formula <span class="keyword">with</span> the <span class="keyword">name</span> <span class="string">"pip"</span></span><br><span class="line">Homebrew provides pip via: <span class="string">`brew install python`</span>. However you will <span class="keyword">then</span></span><br><span class="line">have two Pythons installed <span class="keyword">on</span> your Mac, so alternatively you can <span class="keyword">install</span></span><br><span class="line">pip via the instructions <span class="keyword">at</span>:</span><br><span class="line"></span><br><span class="line">  https://pip.readthedocs.org/en/stable/installing/#<span class="keyword">install</span>-pip</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>
<p>直接进入那个地址看看，<a href="https://pip.readthedocs.org/en/stable/installing/#install-pip" target="_blank" rel="external">https://pip.readthedocs.org/en/stable/installing/#install-pip</a></p>
<p>按照步骤安装pip即可<br>中间遇到了权限问题，加上sudo就可以了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[rebar搭建erlang项目]]></title>
      <url>http://yoursite.com/rebar-erlang/</url>
      <content type="html"><![CDATA[<p>rebar在github上源码：<a href="https://github.com/basho/rebar" target="_blank" rel="external">https://github.com/basho/rebar</a><br>wiki界面是：<a href="https://github.com/rebar/rebar/wiki" target="_blank" rel="external">https://github.com/rebar/rebar/wiki</a></p>
<h4 id="源码编译">源码编译</h4><p>在其<a href="https://github.com/basho/rebar/blob/develop/README.md" target="_blank" rel="external">README.md</a>中已经写好了</p>
<blockquote>
<p><strong>Downloading</strong></p>
<p>You can download a pre-built binary version of rebar from:</p>
<p><a href="https://github.com/rebar/rebar/wiki/rebar" target="_blank" rel="external">https://github.com/rebar/rebar/wiki/rebar</a></p>
<p><strong>Building rebar</strong></p>
<p>$ git clone git://github.com/rebar/rebar.git<br>$ cd rebar<br>$ ./bootstrap<br>Recompile: src/getopt<br>…<br>Recompile: src/rebar_utils<br>==&gt; rebar (compile)<br>Congratulations! You now have a self-contained script called “rebar” in<br>your current working directory. Place this script anywhere in your path<br>and you can use rebar to build OTP-compliant apps.</p>
</blockquote>
<p>编译完成之后会生成一个叫<code>rebar</code>的没有任何后缀的文件，可以将这个文件作为常用命令放到<code>/usr/bin/</code>下面</p>
<p>利用rebar创建并运行erlang项目的文档在此：<a href="https://github.com/rebar/rebar/wiki/Release-handling" target="_blank" rel="external">https://github.com/rebar/rebar/wiki/Release-handling</a></p>
<p>其中用到的rebar的常用命令解释如下：</p>
<ol>
<li><code>rebar -V</code> 查看当前rebar的版本</li>
<li><code>rebar create-app appid=XXX</code> 生成名为XXX的app，会在同级目录下生成src文件夹</li>
<li><code>rebar get-deps</code> 会根据rebar.config中得deps下载获取deps，这个类似于maven的dom文件</li>
<li><code>rebar compile</code> 编译</li>
<li><code>rebar create-node nodeid=XXX</code> 创建节点</li>
<li><code>rebar generate</code> 生成</li>
</ol>
<p><code>rel/files/vm.args</code>中的一些配置：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">## Name of the node，节点名字，运行node()函数显示的是这个</span></span><br><span class="line">-name xx@<span class="number">192.168</span><span class="number">.0</span><span class="number">.79</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## Cookie for distributed erlang，这个比较重要</span></span><br><span class="line">-setcookie poolmaster</span><br><span class="line"></span><br><span class="line"><span class="meta">## Heartbeat management; auto-restarts VM if it dies or becomes unresponsive</span></span><br><span class="line"><span class="meta">## (Disabled by default..use with caution!)</span></span><br><span class="line"><span class="meta">##-heart</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## Enable kernel poll and a few async threads</span></span><br><span class="line"><span class="meta">## epoll是否启用，线上服务器最好启用</span></span><br><span class="line">+K <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## Increase number of concurrent ports/sockets</span></span><br><span class="line"><span class="meta">## 更改最大线程数，线上服务器最好做一下更改</span></span><br><span class="line">-env ERL_MAX_PORTS <span class="number">999999</span></span><br><span class="line">+P <span class="number">1000000</span></span><br><span class="line"><span class="meta">## 启用多核，线上服务器最好启用</span></span><br><span class="line">-smp enable</span><br><span class="line">+A <span class="number">4</span></span><br><span class="line">-kernel inet_dist_listen_min <span class="number">9000</span></span><br><span class="line">-kernel inet_dist_listen_max <span class="number">9999</span></span><br></pre></td></tr></table></figure>
<p><code>rel/XXX/bin/XXX start</code>和<code>rel/XXX/bin/XXX console</code> 都是启动这个XXX节点，不能同时使用，有个同事使用start之后再使用console出错，<code>Protocol: ~tp: the name myapp@192.168.2.140 seems to be in use by another Erlang node&quot;,[&quot;inet_tcp&quot;]}</code> 问我是不是代码写错了。我一般是使用<code>XXX start</code>之后，使用<code>XXX remote_console</code>来连上XXX节点，因为线上服务器使用attach会看到很多很多log，而remote_console是一个干净的环境（看不到log）</p>
<p>vm的设置参考：<br><a href="http://itindex.net/detail/43819-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E7%AC%94%E8%AE%B0-erlang" target="_blank" rel="external">100万并发连接服务器笔记之Erlang完成1M并发连接目标</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于erlang尾递归]]></title>
      <url>http://yoursite.com/erlang-call-last/</url>
      <content type="html"><![CDATA[<p>在查找erlang性能优化方面文章的时候看到这篇文章<a href="http://erlangdisplay.iteye.com/blog/1214167" target="_blank" rel="external">Erlang服务器内存耗尽bug跟踪过程</a>，提到尾递归，作者在最后给出了验证程序，我稍作调整如下：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(test)</span>.</span><br><span class="line"><span class="keyword">-compile</span><span class="params">([export_all])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">t1</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  Pid = spawn(<span class="keyword">fun</span>() -&gt; do_t1() <span class="keyword">end</span>),</span><br><span class="line">  send_msg(Pid, <span class="number">100000</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">t2</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  Pid = spawn(<span class="keyword">fun</span>() -&gt; do_t2() <span class="keyword">end</span>),</span><br><span class="line">  send_msg(Pid, <span class="number">100000</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">send_msg</span><span class="params">(_Pid, <span class="number">0</span>)</span> -&gt;</span></span><br><span class="line">  ok;</span><br><span class="line"><span class="function"><span class="title">send_msg</span><span class="params">(Pid, N)</span> -&gt;</span></span><br><span class="line">  Pid ! &lt;&lt;<span class="number">2</span>:(N)&gt;&gt;,</span><br><span class="line">  timer:sleep(<span class="number">200</span>),</span><br><span class="line">  send_msg(Pid, N - <span class="number">1</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_t1</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  erlang:garbage_collect(self()),</span><br><span class="line">  Result = erlang:process_info(self(), [memory, garbage_collection]),</span><br><span class="line">  io:format(<span class="string">"~w ~n"</span>, [Result]),</span><br><span class="line">  io:format(<span class="string">"stack_size:~w~n~n"</span>, [erlang:process_info(self(), stack_size)]),</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">      _ -&gt;</span><br><span class="line">        do_t1()<span class="comment">%%第一处</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    _:_ -&gt;</span><br><span class="line">      do_t1()<span class="comment">%%第二处</span></span><br><span class="line">  <span class="keyword">end</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">do_t2</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  erlang:garbage_collect(self()),</span><br><span class="line">  Result = erlang:process_info(self(), [memory, garbage_collection]),</span><br><span class="line">  io:format(<span class="string">"~w ~n"</span>, [Result]),</span><br><span class="line">  io:format(<span class="string">"stack_size:~w~n~n"</span>, [erlang:process_info(self(),stack_size)]),</span><br><span class="line">  <span class="keyword">receive</span></span><br><span class="line">    _ -&gt;</span><br><span class="line">      do_t2()</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p>执行<code>erlc test.erl &amp;&amp; erl -eval &quot;test:t1()&quot;</code>得到如下结果：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>erlc test.erl &amp;&amp; erl -eval &quot;test:t2()&quot;</code>得到如下结果：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">[&#123;memory,<span class="number">2680</span>&#125;,&#123;garbage_collection,[&#123;min_bin_vheap_size,<span class="number">46422</span>&#125;,&#123;min_heap_size,<span class="number">233</span>&#125;,&#123;fullsweep_after,<span class="number">65535</span>&#125;,&#123;minor_gcs,<span class="number">0</span>&#125;]&#125;]</span><br><span class="line">stack_size:&#123;stack_size,<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出stack_size在不停增长，确实不是尾递归方式，我们程序没有出错，应该没有进入到catch得block中，故而try catch中的do_t1才是造成非尾递归的原因。<br>评论中@chaoslawful提出了合理的解释，并提到了一种字节码的方式，使用命令<br><code>erlc +&quot;&#39;S&#39;&quot; test.erl</code> 可以清晰看出在do_t1的字节码中可以看到</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="number">97</span>     &#123;<span class="string">'try'</span>,&#123;y,<span class="number">0</span>&#125;,&#123;f,<span class="number">13</span>&#125;&#125;.</span><br><span class="line"> <span class="number">98</span>     &#123;line,[&#123;location,<span class="string">"test.erl"</span>,<span class="number">26</span>&#125;]&#125;.</span><br><span class="line"> <span class="number">99</span>   &#123;label,<span class="number">10</span>&#125;.</span><br><span class="line"><span class="number">100</span>     &#123;loop_rec,&#123;f,<span class="number">11</span>&#125;,&#123;x,<span class="number">0</span>&#125;&#125;.</span><br><span class="line"><span class="number">101</span>     remove_message.</span><br><span class="line"><span class="number">102</span>     &#123;line,[&#123;location,<span class="string">"test.erl"</span>,<span class="number">28</span>&#125;]&#125;.</span><br><span class="line"><span class="number">103</span>     &#123;call,<span class="number">0</span>,&#123;f,<span class="number">9</span>&#125;&#125;.</span><br><span class="line"><span class="number">104</span>     &#123;jump,&#123;f,<span class="number">12</span>&#125;&#125;.</span><br><span class="line"><span class="number">105</span>   &#123;label,<span class="number">11</span>&#125;.</span><br><span class="line"><span class="number">106</span>     &#123;wait,&#123;f,<span class="number">10</span>&#125;&#125;.</span><br><span class="line"><span class="number">107</span>   &#123;label,<span class="number">12</span>&#125;.</span><br><span class="line"><span class="number">108</span>     &#123;try_end,&#123;y,<span class="number">0</span>&#125;&#125;.</span><br><span class="line"><span class="number">109</span>     &#123;deallocate,<span class="number">1</span>&#125;.</span><br><span class="line"><span class="number">110</span>     <span class="keyword">return</span>.</span><br><span class="line"><span class="number">111</span>   &#123;label,<span class="number">13</span>&#125;.</span><br><span class="line"><span class="number">112</span>     &#123;try_case,&#123;y,<span class="number">0</span>&#125;&#125;.</span><br><span class="line"><span class="number">113</span>     &#123;call_last,<span class="number">0</span>,&#123;f,<span class="number">9</span>&#125;,<span class="number">1</span>&#125;.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在try开始之后有call，而在try_case后面使用的是call_last<br>而在do_t2的字节码中没有找到call，只有call_last</p>
<h4 id="关于erlang字节码">关于erlang字节码</h4><p>有两种生成方式，生成的结果也不太一样</p>
<ol>
<li>从源码生成抽象码. erlc +”‘S’” mod.erl, 生成mod.S</li>
<li>从beam生成Opcode. 未公开的功能. erts_debug:df 参数M或者 M, F, 生成mod.dis</li>
</ol>
<p>第一种前面已经给出了<code>erlc +&quot;&#39;S&#39;&quot; test.erl</code><br>第二种进入erl控制台之后，如下命令，可生成test.dis文件，打开看是类似汇编代码的东西，看着头疼。。。</p>
<figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;Erlang/OTP <span class="number">17</span> [erts-<span class="number">6.4</span>] [source] [<span class="number">64</span>-bit] [smp:<span class="number">8</span>:<span class="number">8</span>] [async-threads:<span class="number">10</span>] [hipe] [kernel-poll:false] [dtrace]</span><br><span class="line"></span><br><span class="line">Eshell V6.<span class="number">4</span>  (abort with ^G)</span><br><span class="line"><span class="meta">1&gt; </span>erts_debug:df(test).</span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="http://erlangdisplay.iteye.com/blog/1214167" target="_blank" rel="external">http://erlangdisplay.iteye.com/blog/1214167</a><br><a href="http://www.cnblogs.com/bozhang/articles/3115220.html" target="_blank" rel="external">http://www.cnblogs.com/bozhang/articles/3115220.html</a><br><a href="http://blog.yufeng.info/archives/498" target="_blank" rel="external">http://blog.yufeng.info/archives/498</a><br><a href="http://www.erlang.org/doc/man/erlang.html#process_info-1" target="_blank" rel="external">http://www.erlang.org/doc/man/erlang.html#process_info-1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于加密解密的一些事]]></title>
      <url>http://yoursite.com/encode-decode/</url>
      <content type="html"><![CDATA[<p>看到一个<a href="http://www.iroowe.com/about/" target="_blank" rel="external">blog</a>在关于我得联系方式中写得是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> YmVzdGx1b2xpd2VAZ21haWwuY29tCg== | openssl base64 <span class="_">-d</span></span><br></pre></td></tr></table></figure>
<p>看起来很高大上的样子!!!<br>其实是利用base64的加密算法隐藏了自己的邮箱，先加密得到一个字符串<br>终端执行如下：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  echo bestluoliwe<span class="variable">@gmail</span>.com | openssl base64</span><br><span class="line">YmVzdGx1b2xpd2VAZ21haWwuY29tCg==</span><br><span class="line">➜  ~  echo YmVzdGx1b2xpd2VAZ21haWwuY29tCg== | openssl base64 -d</span><br><span class="line">bestluoliwe<span class="variable">@gmail</span>.com</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure>
<p>也可以使用其他加密方式，比如<code>aes-128-cbc</code>, <code>des3</code></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  openssl <span class="keyword">enc</span> -aes-128-cbc -<span class="keyword">in</span> a.<span class="keyword">log</span> -<span class="keyword">out</span> b.<span class="built_in">log</span></span><br><span class="line">enter aes-128-cbc encryption password:</span><br><span class="line">Verifying - enter aes-128-cbc encryption password:</span><br><span class="line">➜  openssl <span class="keyword">enc</span> -<span class="keyword">d</span> -aes-128-cbc -<span class="keyword">in</span> b.<span class="keyword">log</span> -<span class="keyword">out</span> c.<span class="built_in">log</span></span><br><span class="line">enter aes-128-cbc decryption password:</span><br><span class="line">➜  tail c.<span class="built_in">log</span></span><br><span class="line">king</span><br><span class="line">➜  tail a.<span class="built_in">log</span></span><br><span class="line">king</span><br><span class="line">➜  tail b.<span class="built_in">log</span></span><br><span class="line">Salted__��!����6L0��V��<span class="keyword">L</span>/�rD%                                                                                                     ➜</span><br></pre></td></tr></table></figure>
<p>这个地方加密出来的字符</p>
<p>看别人blog的时候经常看到md5这个词眼，我记得md5不属于加密解密的范围，但是百度md5的时候出现了很多md5解密网站，再深究一下这些网站应该是暴力匹配的破解方法，就是讲很多密码组合的md5求出来，当用户输入md5码的时候反向查找的方法，可以看看知乎上的回答<a href="https://www.zhihu.com/question/22651987" target="_blank" rel="external">为什么说 MD5 是不可逆的？</a></p>
<p>md5只是提取特征码，理论上不同文件的md5相同概率极小，所以用来做文件校验，给文件的同时给出md5码，防止被篡改，同样的还有sum、cksum、md5sum、sha1sum等等</p>
<p>下面是来自<a href="http://blog.sina.com.cn/s/blog_702c2db50100pjn7.html" target="_blank" rel="external">夜莺的博客</a></p>
<ol>
<li><p>base64编码/解码<br>谈到命令行下怎样发送邮件附件，很多人想起了uuencode。也能够使用base64编码。以下是openssl base64编码/解码的使用：<br>$ openssl base64   filename.txt<br>$ openssl base64 -d   filename.bin</p>
</li>
<li><p>校验文档的一致性<br>UNIX下校验文档一致性的方法很多，比如sum、cksum、md5sum、sha1sum等。sum和cksum适用于简单校验的场合，生成的校验码 容易重复。md5sum有安全漏洞，当前比较推荐的是sha1sum。但是sha1sum在不同的平台用法有些不同。考虑到跨平台性，建议用 openssl。<br>$ openssl sha1 filename<br>SHA1(filename)= e83a42b9bc8431a6645099be50b6341a35d3dceb<br>$ openssl md5 filename<br>MD5(filename)= 26e9855f8ad6a5906fea121283c729c4</p>
</li>
<li><p>文档加密/解密<br>OpenSSL支持很多加密算法，但是一些算法只是为了保持向后兼容性，现在已不推荐使用，比如DES和RC4-40。推荐使用的加密算法是 bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障。<br>加密示例：<br>$ openssl enc -aes-128-cbc   filename.aes-128-cbc<br>enter aes-128-cbc encryption password:<br>Verifying - enter aes-128-cbc encryption password:<br>解密示例：<br>$ openssl enc -d -aes-128-cbc -in filename.aes-128-cbc &gt; filename<br>enter aes-128-cbc decryption password:</p>
</li>
<li><p>口令生成和传递<br>openssl能够生成随机性很强的口令。<br>$ openssl rand 15 -base64<br>s69mj+8ToN2p3Z1KESBG<br>以上命令需要openssl生成15个字节序列，然后用base64编码，结果产生20个字符。<br>在日常生活中，经常可看到这样的情况：系统管理员配置初始密码给用户，然后让用户登录去修改新密码，这给安全带来了隐患。较好的做法是用户生成口令加密后 的结果发给管理员，让管理员配置到系统中。<br>比如对于以上生成的口令，UNIX口令加密方法如下：<br>$ openssl passwd -1 s69mj+8ToN2p3Z1KESBG<br>$1$Rp/btEwK$qhUGFlsIpDtNT1I9MD/Gg1<br>管理员收集每个用户交给他的加密后的串，写到一个文档中，比如文档名为newpassword：<br>user_a:$1$Rp/btEwK$qhUGFlsIpDtNT1I9MD/Gg1<br>user_b:$1$zmUy5lry$aG45DkcaJwM/GNlpBLTDy0<br>…<br>一个用户一行，用户名和密码之间用冒号分隔。<br>系统管理员运行如下命令导入用户密码：<br>$ chpasswd –encrypted<br>对于老UNIX系统，生成口令密码无需参数-1，比如：<br>$ openssl passwd s69mj+8ToN2p3Z1KESBG<br>Warning: truncating password to 8 characters<br>FS4lGulQ915WU<br>假如passwd命令后没有接口令，openssl会提示输入一个：<br>$ openssl passwd -1<br>Password:<br>Verifying - Password:<br>$1$jACBc0.C$KR5DcpttXQoKfDiapyvav0</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C中#和##的意义]]></title>
      <url>http://yoursite.com/C-Meanings/</url>
      <content type="html"><![CDATA[<p>看一些源码中经常出现#define中带有#或者##，查过很多次，每次都记不住。。</p>
<p>首先define是在预编译的时候做代码替换的<br><strong>1. 单个#表示字符串化，e.g. <code>#A</code>就相当于JAVA中的<code>(&quot;&quot;+A)</code>的意思</strong><br><strong>2. 双个##表示连接，e.g. <code>A##bc</code>替换之后相当于<code>Abc</code></strong></p>
<p>运行下下面代码就清晰了：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT(A) cout&lt;&lt;#A&lt;&lt;":"&lt;&lt;(A)&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR(A) st##A</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNC_NAME(A, B) fun##A(B)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funName</span>(<span class="params"><span class="keyword">string</span> name</span>) </span>&#123; OUTPUT(name); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funAge</span>(<span class="params"><span class="keyword">int</span> age</span>) </span>&#123; OUTPUT(age); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">string</span> str = <span class="string">"name"</span>;</span><br><span class="line"></span><br><span class="line">    OUTPUT(a);</span><br><span class="line">    OUTPUT(b);</span><br><span class="line">    OUTPUT(a + b);</span><br><span class="line">    OUTPUT(str);</span><br><span class="line"></span><br><span class="line">    OUTPUT(CHAR(r));</span><br><span class="line">    <span class="comment">//cout&lt;&lt;#CHAR(r)&lt;&lt;":"&lt;&lt;(CHAR(r))&lt;&lt;endl</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;#CHAR(r)&lt;&lt;":"&lt;&lt;(str)&lt;&lt;endl</span></span><br><span class="line">    cout &lt;&lt; <span class="string">"CHAR(r)"</span> &lt;&lt; <span class="string">":"</span> &lt;&lt; (str) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    FUNC_NAME(Name, <span class="string">"king"</span>);</span><br><span class="line">    FUNC_NAME(Age, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:<span class="number">1</span></span><br><span class="line"><span class="selector-tag">b</span>:<span class="number">2</span></span><br><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">b</span>:<span class="number">3</span></span><br><span class="line">str:name</span><br><span class="line"><span class="function"><span class="title">CHAR</span><span class="params">(r)</span></span>:name</span><br><span class="line"><span class="function"><span class="title">CHAR</span><span class="params">(r)</span></span>:name</span><br><span class="line">name:king</span><br><span class="line">age:<span class="number">12</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux free 命令]]></title>
      <url>http://yoursite.com/linux-free-command/</url>
      <content type="html"><![CDATA[<p>linux中的free命令可以查看内存使用情况，带参数<code>-m</code>表示按照Mb为单位输出，也可以带其他参数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits<span class="variable">@100:</span>~$ free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line"><span class="attribute">Mem</span>:         <span class="number">16002</span>      <span class="number">15476</span>        <span class="number">526</span>          <span class="number">0</span>        <span class="number">410</span>       <span class="number">5257</span></span><br><span class="line">-/+ buffers/<span class="attribute">cache</span>:       <span class="number">9808</span>       <span class="number">6194</span></span><br><span class="line"><span class="attribute">Swap</span>:        <span class="number">16336</span>      <span class="number">15005</span>       <span class="number">1331</span></span><br><span class="line">fruits<span class="variable">@100</span>:~$</span><br></pre></td></tr></table></figure>
<h3 id="第二行：">第二行：</h3><ol>
<li>total <code>16002</code>：总内存大小，可以认为就是机器的内存条大小</li>
<li>used <code>15476</code>：系统内核认为已使用的内存，是系统认为的占用内存，其实有些可以不算</li>
<li>free <code>526</code>：系统内核认为的空闲内存，完全空闲</li>
<li>shared 据说已弃用</li>
<li>buffers/cached <code>410/5257</code>：缓存</li>
</ol>
<p><strong>从内核角度看内存: total = userd + free</strong></p>
<h3 id="第三行：">第三行：</h3><ol>
<li><strong>used <code>9808</code>：</strong>从应用角度看是已分配的内存（不可能再分配给我了），等于第二行中的<strong>used - buffers - cached</strong></li>
<li><strong>free <code>6194</code>：</strong>从应用角度看是还可能给我的总内存，等于第二行中得<strong>free + buffers + cached</strong></li>
</ol>
<p><strong>从应用角度看内存：系统占用了9808M内存，能给我的内存是6194M</strong></p>
<p>参考：</p>
<ol>
<li><a href="http://itlab.idcquan.com/linux/set/935456.html" target="_blank" rel="external">http://itlab.idcquan.com/linux/set/935456.html</a></li>
<li><a href="http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html" target="_blank" rel="external">http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac homebrew 安装erlang特定版本]]></title>
      <url>http://yoursite.com/mac-homebrew-%E5%AE%89%E8%A3%85erlang%E7%89%B9%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>当前最新版是<code>R18</code>，但最新版有些代码和现在服务器代码不太兼容，需要使用<code>R17</code></p>
<ul>
<li>如果直接使用<code>brew install erlang</code>则直接安装的是最新版</li>
<li>使用<code>brew install erl</code>再选择version的方法<br><code>brew install homebrew/versions/erlang-r17</code><br>好像erlang的官网被墙，最后最是在下载man这一步死掉</li>
</ul>
<p>后面有尝试下载源代码的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.erlang.org/download/otp_src_17.5.tar.gz</span><br><span class="line">tar -zxvf otp_src_17.5.tar.gz</span><br><span class="line">cd otp_src_17.5</span><br><span class="line">sudo ./configure  --prefix=/opt/erlang</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>但在执行config的时候出现下面情况</p>
<blockquote>
<hr>
<p><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong>  APPLICATIONS DISABLED  <strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></p>
<hr>
<p>crypto         : No usable OpenSSL found<br>ssh            : No usable OpenSSL found<br>ssl            : No usable OpenSSL found</p>
<hr>
</blockquote>
<p>即表示openssl没有安装，但是自己调用openssl是ok的。。</p>
<p>找来找去<br>最后在<a href="https://github.com/elixir-lang/elixir/issues/1748" target="_blank" rel="external">github上的一个帖子</a><br>的最后找到openssl的问题，使用如下命令：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install -vd --<span class="keyword">with</span>-ssl=<span class="regexp">/usr/bin</span><span class="regexp">/openssl homebrew/versions</span><span class="regexp">/erlang-r17</span></span><br></pre></td></tr></table></figure>
<p>中途也会卡在man和html的地方，我直接选择ignore的方式，最后居然成功了，。。。</p>
<hr>
<p>以上是MAC下安装经历的问题，如果是在ubuntu下面，遇到类似的bug，下面这个链接可能有所帮助<br><a href="https://sites.google.com/site/comptekkia/erlang/how-to-install-erlang-on-ubuntu-10-10" target="_blank" rel="external">How to Install Erlang on Ubuntu 10.10</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse ADT ZIP包离线安装]]></title>
      <url>http://yoursite.com/Eclipse-ADT-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>官网的做法如下：<br><a href="http://developer.android.com/sdk/installing/installing-adt.html" target="_blank" rel="external">http://developer.android.com/sdk/installing/installing-adt.html</a></p>
<ol>
<li><p>Download the ADT Plugin zip file (do not unpack it):</p>
</li>
<li><p>Start Eclipse, then select <strong>Help</strong> &gt; <strong>Install New Software</strong>.</p>
</li>
<li>Click <strong>Add</strong>, in the top-right corner.</li>
<li>In the Add Repository dialog, click <strong>Archive</strong>.</li>
<li>Select the downloaded ADT-23.0.6.zip file and click OK.</li>
<li>Enter “ADT Plugin” for the name and click OK.</li>
<li>In the Available Software dialog, select the checkbox next to Developer Tools and click Next.</li>
<li>In the next window, you’ll see a list of the tools to be downloaded. Click Next.</li>
<li>Read and accept the license agreements, then click Finish.<br>If you get a security warning saying that the authenticity or validity of the software can’t be established, click OK.</li>
<li>When the installation completes, restart Eclipse.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac Android ADB环境变量设置]]></title>
      <url>http://yoursite.com/Mac-Android-ADB%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ol>
<li>启动Terminal终端工具</li>
<li>输入cd ~/ 进入当前用户的home目录</li>
<li>vim .bash_profile</li>
<li><p>在文件尾部加入以下内容：</p>
<pre><code>export <span class="constant">PATH=</span><span class="variable">${</span><span class="constant">PATH}</span><span class="symbol">:/android_sdk/tools</span><span class="symbol">:/android_sdk/platform-tools</span>
</code></pre></li>
<li><p>终端执行 <code>source .bash_profile</code> </p>
</li>
<li>验证：输入adb回车。如果未显示command not found，说明此命令有效，环境便亮设置完成。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android SDK Manager 代理设置]]></title>
      <url>http://yoursite.com/Android-SDK-Manager-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ol>
<li><p>启动 Android SDK Manager ，打开主界面，依次选择「Tools」、「Options…」，弹出『Android SDK Manager - Settings』窗口；</p>
</li>
<li><p>在『Android SDK Manager - Settings』窗口中，在「HTTP Proxy Server」和「HTTP Proxy Port」输入框内填入 <strong>mirrors.neusoft.edu.cn</strong> 和 <strong>80</strong>，并且选中 <em>Force https://… sources to be fetched using http://…</em>复选框。设置完成后单击「Close」按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；</p>
</li>
<li><p>依次选择「Packages」、「Reload」。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3974 Palindrome]]></title>
      <url>http://yoursite.com/POJ-3974-Palindrome/</url>
      <content type="html"><![CDATA[<p><strong>题目大意</strong>:<br><strong>“给一个小写字符串（长度最长达到10w），找出其中最长回文串的长度”</strong></p>
<p>看到这个题目的数据范围就傻逼了，不会做。。猜测可能是后缀数组或者AC自动机之类的算法，但这么多AC的题目我居然不会做，有点不甘心啊，看来应该是个经典题，就找了下</p>
<ol>
<li>后缀数组好像确实可以，复杂度O(nlogn)，但是我早忘光了。。</li>
<li>Manacher算法，复杂度O(n)，但是没学过啊。。</li>
</ol>
<p>不会就学一下！</p>
<p>Manacher算法思想还是很简单的，假设一个串是回文串，那么从必然左右对称，那么如果求出了对称中左半部分是个回文串，那么右边部分的最小可能值就出来了</p>
<p>具体看这个，有图还是容易理解一些：<br><a href="http://www.felix021.com/blog/read.php?2040" target="_blank" rel="external">http://www.felix021.com/blog/read.php?2040</a><br>或者这个：<br><a href="http://blog.sina.com.cn/s/blog_70811e1a01014esn.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_70811e1a01014esn.html</a></p>
<p>本题AC代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN], tmp[MAXN];<span class="comment">//1000000*2+10</span></span><br><span class="line"><span class="keyword">int</span> p[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> p[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    p[0] = 1;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx &lt;= i)</span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i] = min(mx - i, p[<span class="number">2</span> * id - i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i - p[i] &gt;= <span class="number">0</span> &amp;&amp; i + p[i] &lt; len &amp;&amp; str[i - p[i]] == str[i + p[i]])</span><br><span class="line">            p[i]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + p[i] &gt; mx) &#123;</span><br><span class="line">            mx = p[i] + i;</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nca = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tmp, <span class="string">"END"</span>) == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(tmp), k = <span class="number">2</span>;</span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">'?'</span>;</span><br><span class="line">        str[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            str[k++] = tmp[i];</span><br><span class="line">            str[k++] = <span class="string">'#'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str[k] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, nca++, solve(str, p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实算法核心只有不到10行，赞！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git 时遇到fatal:multiple stage entries for merged file处理办法]]></title>
      <url>http://yoursite.com/git-%E6%97%B6%E9%81%87%E5%88%B0fatal-multiple-stage-entries-for-merged-file%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>进入到git的根目录下</strong></p>
<ol>
<li>rm .git/index</li>
<li>git add ./</li>
<li>git commit -am “信息”</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 3752 字母旋转游戏]]></title>
      <url>http://yoursite.com/POJ-3752-%E5%AD%97%E6%AF%8D%E6%97%8B%E8%BD%AC%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p>每日一水</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans[<span class="number">1002</span>][<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//方向变化方向依次是：向右、向下、向左、向上</span></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = n * m;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, start = <span class="number">0</span>, ii = <span class="number">0</span>, jj = <span class="number">0</span>, i, j;</span><br><span class="line">        <span class="keyword">while</span> (cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans[ii][jj] = start;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断是否转向</span></span><br><span class="line">            i = dir[k][<span class="number">0</span>] + ii;</span><br><span class="line">            j = dir[k][<span class="number">1</span>] + jj;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= n || j &gt;= m || ans[i][j] != <span class="number">-1</span>)</span><br><span class="line">                k = (k + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            start = (start + <span class="number">1</span>) % <span class="number">26</span>;</span><br><span class="line">            ii = ii + dir[k][<span class="number">0</span>];</span><br><span class="line">            jj = jj + dir[k][<span class="number">1</span>];</span><br><span class="line">            --cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"   %c"</span>, <span class="string">'A'</span> + ans[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[衡水全程马拉松总结帖]]></title>
      <url>http://yoursite.com/marathon-hengshui/</url>
      <content type="html"><![CDATA[<p>2015/09/26 衡水全程马拉松</p>
<p>我是用别人的名额跑的，我们一行4男4女，有老乡ddp，和他在豆瓣认识的一些志同道合的跑马的好友，我和另外两个男生是全程，其他是半程，虽然不是很熟，但是兴趣相同，聊得很开，他们基本都是已经跑过全程的人了，而我是第一次，按照平时跑步的节奏，我给自己定的目标是430</p>
<p>09/25<br>下午到马拉松广场旁边的[泰华商务酒店]<a href="http://map.baidu.com/detail?qt=ninf&amp;uid=d5ce584e330046bfbe4842a9&amp;wd=%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%B9%BF%E5%9C%BA&amp;b=(12874299.345,4501198.75;12874816.345,4501599.25)&amp;query=&amp;qid=&amp;page_num=&amp;detail=hotel&amp;from=map，" target="_blank" rel="external">http://map.baidu.com/detail?qt=ninf&amp;uid=d5ce584e330046bfbe4842a9&amp;wd=%E9%A9%AC%E6%8B%89%E6%9D%BE%E5%B9%BF%E5%9C%BA&amp;b=(12874299.345,4501198.75;12874816.345,4501599.25)&amp;query=&amp;qid=&amp;page_num=&amp;detail=hotel&amp;from=map，</a><br>环境还不错</p>
<p>晚饭在旁边的农家乐吃的“水煮活鱼”<img src="http://7xocq1.com1.z0.glb.clouddn.com/thumb_IMG_2789_1024.jpg" alt="">，有点咸，味道也一般，晚上看看电视睡觉</p>
<p>09/26<br>6:00起床吃饭了，吃的包子啥的，没什么感觉，完事之后就回屋收拾东西，6:30在酒店楼下集合，然后走到马拉松广场走，差不多7点左右走到，那边已经很多人了<img src="http://7xocq1.com1.z0.glb.clouddn.com/thumb_IMG_2793_1024.jpg" alt="">据说这次总人数有2w左右，我们插了个队，离起点很近</p>
<h2 id="7点半发枪起跑">7点半发枪起跑</h2><p><strong>0KM-10KM</strong><br>和ddp还有几个跑半马的一起跑的，感觉没什么难度，10公里处半马折返往回跑，后面我就一个人了，另外两个跑全马的早跑前面去了<br><strong>“这样跑下去，430一点问题都没有啊”</strong></p>
<p><strong>11KM-15KM</strong><br>虽然没有认识的了，但是路人非常热情，各种鼓劲，每次经过人群，感觉就像打了激素，要快上那么一会儿<br><strong>“感觉应该没问题，坚持就是胜利”</strong></p>
<p><strong>15KM-20KM</strong><br>开始有点累的感觉了，可能经过的长距离训练还是少了，这个点差不多是我平时长跑的终点了，但我还在坚持，太阳那个晒啊，学习其他跑友，整了块有水的海绵放在脖子上，速度开始慢下来了<br><strong>“按现在的速度，430应该没问题的，加油”</strong></p>
<p><strong>20KM-25KM</strong><br>后面超越我的人越来越多了，我给自己打气，慢慢跑，每公里跑进7分钟就可以，就开始跑800m，走200m（喝水的地方）的节奏吧，430应该没问题，后面还可以发发力<br><strong>“有点累了，要是和他们跑半马，现在应该都到终点了，傻逼了”</strong></p>
<p><strong>25KM-30KM</strong><br>越跑越慢，感觉自己已经是队伍的最后了，路上看到好多老头都跑前面去了，路上还遇到几个腿抽筋的，在揉腿，30km左右遇到个男选手好像摔跤了，腿都感觉瘸了<br><strong>“我还没抽筋，我这么牛逼！！！，注意安全，到不了430也无所谓了，重在参与，嗯，慢慢来吧”</strong></p>
<p><strong>30KM-38KM</strong><br>这一段路太坑爹了，一点树荫都没有，暴晒，我在30KM饮水处，整了一大瓶水（同行的人说30km以后水很重要，跑得慢的话经常后面补给处啥都没有了），边走边喝，感觉脚底好疼，没走一步都够累，怀疑自己的鞋子是不是太硬了，看到好多人都在走，我走走跑跑，但是大部分走，这时候每公里都快到9分钟了，水喝多了，跑起来肚子哐当哐当的</p>
<p><strong>38KM</strong><br>有点坚持不下去了，走都不想走了，之前拿的一整瓶维生素水也被我完全喝下去了，感觉没啥劲了，太阳还那么晒，有点在沙漠上的感觉<br><strong>“老子再也受这种罪了，完全就是自虐”</strong></p>
<p><strong>38.5KM</strong><br>老乡打来电话，问我到哪儿了，他都回酒店半天了，我说还有点距离，这个时候差不多4小时20分钟左右，觉得430是无望了，按现在速度500应该ok，37左右是个折返点，31-36和36-41是同一段路，这10公里没什么树木，感觉要死了<br><strong>“重在参与，去TMD成绩”</strong></p>
<p><strong>40KM</strong><br>已经可以看到终点了，但是脚不怎么听使唤，一跑就感觉特别痛，走走跑跑<br><strong>“终于要到了，草”</strong></p>
<p><strong>42KM</strong><br>一看表马上5个小时了，难道500都达不到，拼了，最后到终点那段感觉差不多有12km/h速度</p>
<p><strong>终点</strong><br>4:59:53，是当时显示在终点计时器上的时间</p>
<p><strong>后续</strong><br>找志愿者拍了两张照片，后来发现正好和一只全马狗一起到达终点，我拍照的时候正好在我旁边<img src="http://7xocq1.com1.z0.glb.clouddn.com/thumb_IMG_2795_1024.jpg" alt=""><br><img src="http://7xocq1.com1.z0.glb.clouddn.com/thumb_IMG_2799_1024.jpg" alt=""></p>
<p>####关于计时成绩：<br>现在都是算净成绩，每人都发了一块芯片绑在鞋带上，每个阶段有个减速带之类的东西（差不多每5公里有一个），可以记录踩上去的时间，净成绩就是终点那个带记录的时间-起点那个带记录的时间，如果某个点没有成绩，好像成绩就作废了<br><img src="http://7xocq1.com1.z0.glb.clouddn.com/thumb_IMG_2805_1024.jpg" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>
